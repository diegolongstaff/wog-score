// history.js - Módulo para manejar el historial de WOGs

// Importar funciones de la base de datos
import { 
  getEventos, 
  getParticipantes,
  deleteEvento
} from '../database.js';

// Importar función para mostrar errores
import { showErrorMessage } from '../app.js';

// Referencias a elementos del DOM
const historialBody = document.getElementById('historial-body');
const modalConfirmacion = document.getElementById('modal-confirmacion');
const btnConfirmarAccion = document.getElementById('btn-confirmar-accion');
const btnCancelarConfirmacion = document.getElementById('btn-cancelar-confirmacion');
const modalConfirmacionTitulo = document.getElementById('modal-confirmacion-titulo');
const modalConfirmacionMensaje = document.getElementById('modal-confirmacion-mensaje');

// Variables para almacenar datos temporales
let participantesMap = new Map(); // Mapa de ID a datos de participante
let eventoAEliminar = null; // ID del evento que se está por eliminar

// Eventos del DOM
document.addEventListener('DOMContentLoaded', init);
document.addEventListener('tabChanged', handleTabChange);
document.addEventListener('wogUpdated', updateHistorial);

// Configurar botones del modal de confirmación
btnCancelarConfirmacion.addEventListener('click', () => {
  modalConfirmacion.style.display = 'none';
});

document.querySelector('#modal-confirmacion .close-modal').addEventListener('click', () => {
  modalConfirmacion.style.display = 'none';
});

btnConfirmarAccion.addEventListener('click', async () => {
  if (eventoAEliminar) {
    try {
      await deleteEvento(eventoAEliminar);
      eventoAEliminar = null;
      modalConfirmacion.style.display = 'none';
      
      // Actualizar vistas
      updateHistorial();
      
      // Disparar evento para actualizar otras vistas
      const event = new CustomEvent('wogUpdated');
      document.dispatchEvent(event);
    } catch (error) {
      console.error('Error al eliminar evento:', error);
      showErrorMessage('Error al eliminar el WOG. Por favor, intenta de nuevo.');
    }
  }
});

/**
 * Inicializa el módulo
 */
function init() {
  console.log('Inicializando módulo de historial...');
}

/**
 * Maneja el cambio de pestañas
 * @param {CustomEvent} event Evento de cambio de pestaña
 */
function handleTabChange(event) {
  if (event.detail.tabId === 'historial') {
    updateHistorial();
  }
}

/**
 * Actualiza la tabla de historial
 */
async function updateHistorial() {
  try {
    // Mostrar indicador de carga
    historialBody.innerHTML = `
      <tr>
        <td colspan="7" class="loading-indicator">
          <i class="fas fa-spinner fa-spin"></i> Cargando historial...
        </td>
      </tr>
    `;
    
    // Cargar datos de participantes y eventos
    const [participantes, eventos] = await Promise.all([
      getParticipantes(),
      getEventos()
    ]);
    
    // Crear mapa de participantes para acceso rápido
    participantesMap.clear();
    participantes.forEach(p => {
      participantesMap.set(p.id, p);
    });
    
    // Verificar si hay eventos
    if (eventos.length === 0) {
      historialBody.innerHTML = `
        <tr>
          <td colspan="7" class="empty-state">
            <i class="fas fa-calendar-alt"></i>
            <p>No hay WOGs registrados. Registra algunos para comenzar.</p>
          </td>
        </tr>
      `;
      return;
    }
    
    // Limpiar tabla
    historialBody.innerHTML = '';
    
    // Ordenar eventos por fecha, del más reciente al más antiguo
    const eventosOrdenados = [...eventos].sort((a, b) => {
      // Convertir timestamps a Date
      const fechaA = a.fecha instanceof Date ? a.fecha : a.fecha.toDate();
      const fechaB = b.fecha instanceof Date ? b.fecha : b.fecha.toDate();
      return fechaB - fechaA;
    });
    
    // Renderizar filas de eventos
    eventosOrdenados.forEach(evento => {
      const fila = document.createElement('tr');
      
      // Formatear fecha
      const fecha = evento.fecha instanceof Date ? evento.fecha : evento.fecha.toDate();
      const fechaFormateada = fecha.toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
      
      // Obtener nombre de la sede
      const sedeParticipante = participantesMap.get(evento.sede);
      
      // Construir string de asadores
      const asadoresNombres = evento.asadores
        .map(id => {
          const participante = participantesMap.get(id);
          return participante ? participante.nombre : 'Desconocido';
        })
        .join(' / ');
      
      // Construir string de compras
      let comprasNombres = '';
      if (evento.comprasCompartidas && evento.comprasCompartidas.length > 0) {
        comprasNombres = evento.comprasCompartidas
          .map(id => {
            const participante = participantesMap.get(id);
            return participante ? participante.nombre : 'Desconocido';
          })
          .join(' / ');
      } else {
        const comprasParticipante = participantesMap.get(evento.compras);
        comprasNombres = comprasParticipante ? comprasParticipante.nombre : 'Desconocido';
      }
      
      // Construir string de asistentes
      const asistentesNombres = evento.asistentes
        .map(id => {
          const participante = participantesMap.get(id);
          return participante ? participante.nombre : 'Desconocido';
        })
        .join(', ');
      
      fila.innerHTML = `
        <td>${fechaFormateada}</td>
        <td>${sedeParticipante ? sedeParticipante.nombre : 'Desconocido'}</td>
        <td>${evento.subsede || '-'}</td>
        <td>${comprasNombres}</td>
        <td>${asadoresNombres}</td>
        <td>${asistentesNombres}</td>
        <td>
          <button onclick="window.historyModule.confirmarEliminarEvento('${evento.id}')" class="btn-danger" style="padding: 5px 10px;">
            <i class="fas fa-trash"></i>
          </button>
        </td>
      `;
      
      historialBody.appendChild(fila);
    });
    
  } catch (error) {
    console.error('Error al actualizar historial:', error);
    showErrorMessage('Error al cargar el historial. Por favor, intenta de nuevo.');
    
    historialBody.innerHTML = `
      <tr>
        <td colspan="7" class="empty-state">
          <i class="fas fa-exclamation-triangle"></i>
          <p>Hubo un error al cargar el historial. Intenta de nuevo más tarde.</p>
        </td>
      </tr>
    `;
  }
}

/**
 * Muestra el diálogo de confirmación para eliminar un evento
 * @param {string} id ID del evento a eliminar
 */
function confirmarEliminarEvento(id) {
  eventoAEliminar = id;
  modalConfirmacionTitulo.textContent = 'Eliminar WOG';
  modalConfirmacionMensaje.textContent = '¿Estás seguro de que deseas eliminar este WOG? Esta acción no se puede deshacer.';
  modalConfirmacion.style.display = 'block';
}

// Exponer funciones necesarias al alcance global
window.historyModule = {
  confirmarEliminarEvento
};

